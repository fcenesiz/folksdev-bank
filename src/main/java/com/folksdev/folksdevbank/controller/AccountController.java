package com.folksdev.folksdevbank.controller;

import com.folksdev.folksdevbank.dto.AccountDto;
import com.folksdev.folksdevbank.model.Account;
import com.folksdev.folksdevbank.request.CreateAccountRequest;
import com.folksdev.folksdevbank.request.UpdateAccountRequest;
import com.folksdev.folksdevbank.service.AccountService;
import com.folksdev.folksdevbank.service.MessageService;
import lombok.AllArgsConstructor;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/account")
@AllArgsConstructor
public class AccountController {

    // Not: Bir modelin sadece bir alanını değiştireceksek PUT yerine PATCH kullanılmalı!

    // AutoGenerated CRUD

    private final AccountService accountService;
    private final MessageService messageService;

    @PostMapping("add")
    public ResponseEntity<AccountDto> createAccount(@RequestBody CreateAccountRequest accountRequest){
        return ResponseEntity.ok(accountService.createAccount(accountRequest));
    }
    @GetMapping("all")
    public ResponseEntity<List<AccountDto>> getAllAccounts(@RequestParam(value = "message")  String message){
        messageService.sendRabbitMessage(message);
        return ResponseEntity.ok(accountService.getAllAccounts());
    }

    @GetMapping("/{id}")
    public ResponseEntity<AccountDto> getAccountById(@PathVariable String id){
        return ResponseEntity.ok(accountService.getAccountDtoById(id));
    }

    @PutMapping("/{id}")
    public ResponseEntity<AccountDto> updateAccount(@PathVariable String id,
            @RequestBody UpdateAccountRequest accountRequest){
        return ResponseEntity.ok(accountService.updateAccountById(id, accountRequest));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteAccountById(@PathVariable String id){
        accountService.deleteAccountById(id);
        return ResponseEntity.ok().build();
    }

    @PutMapping("/withdraw/{id}/{amount}")
    public ResponseEntity<AccountDto> withdrawMoney(@PathVariable String id, @PathVariable Double amount){
        return ResponseEntity.ok(accountService.withdrawMoney(id, amount));
    }

    @PutMapping("/addmoney/{id}/{amount}")
    public ResponseEntity<AccountDto> addMoney(@PathVariable String id, @PathVariable Double amount){
        return ResponseEntity.ok(accountService.addMoney(id, amount));
    }

}
